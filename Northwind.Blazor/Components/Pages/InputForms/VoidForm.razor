@rendermode @(new InteractiveServerRenderMode(prerender: false))
@page "/void"

@inject IHttpClientFactory httpClientFactory
@inject ICartService cartService
@inject ITransactionJson transactionJson
@inject NavigationManager Navigation

@inject ICustomersScoped customersScoped
@inject ISessionTransactions sessionTransactions

<h1>@transactionPageTitle</h1>

<div class="container">
    <div class="row">
        <div class="col-md-12 mb-2">
            <div class="card">
                <div class="card-body">
                    @if (showFieldCard)
                    {
                        <div class="card-title"><h3>Trasnaction Data:</h3></div>
                        <div class="row row-cols-2">
                            <div class="col border">
                                <div>
                                    <label>Transaction Type-Status: </label>
                                </div>
                                <div>
                                    <label>Transaction ID: </label>
                                </div>
                                <div>
                                    <label>Transaction Amount: </label>
                                </div>
                            </div>
                            <div class="col border border-secondary">
                                <div>@sessionTransJson.TransactionType</div>
                                <div>@transactionDisplayId</div>
                                <div>
                                    <span>$@sessionTransJson.TransactionAmount</span>
                                </div>
                            </div>
                        </div>
                        <div class="card-footer">
                            <button class="btn btn-primary" type="button" @onclick="SubmitForVoid">
                                SUBMIT FOR VOID
                            </button>
                        </div>
                    }
                    @if (showResultCard)
                    {
                        <div class="card">
                            <div class="card-title"><h3>Void Data:</h3></div>
                            <div class="card-body">
                                @if (propertyValues != null && propertyValues.Count > 0)
                                {
                                    <ul>
                                        @foreach (var propertyValue in propertyValues)
                                        {
                                            <li>@propertyValue</li>
                                        }
                                    </ul>
                                }
                                else
                                {
                                    <p>@error</p>
                                }
                            </div>
                            <div class="card-footer">
                                <div class="dropdown">
                                    <button class="btn btn-outline-primary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                        Follow on Actions
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li><a class="dropdown-item" href="checkout">New Checkout</a></li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>



@code {

    private string transactionPageTitle = "Void Processing";

    private string error = string.Empty;

    private ISessionTransactions _sessionTransactions = new SessionTransactions();
    private SessionTransJson sessionTransJson = new SessionTransJson();
    private FollowOnTransResponse? followOnTransResponse = new FollowOnTransResponse();

    private CcTransactionTypes currentTransaction;

    private bool showFieldCard = false;
    private bool showResultCard = false;
    private bool containsError = false;

    string transactionDisplayId = string.Empty;

    private static List<BasicErrorInfo> basicErrorInfos = new List<BasicErrorInfo>();
    private List<string> propertyValues = new List<string>();

    protected override void OnInitialized()
    {
        _sessionTransactions = sessionTransactions;

        sessionTransJson = _sessionTransactions.Transactions.LastOrDefault()!;

        if (sessionTransJson is not null && sessionTransJson.TransactionJson is not null)
        {
            using (JsonDocument document = JsonDocument.Parse(sessionTransJson.TransactionJson.ToString()!))
            {
                if (document.RootElement.TryGetProperty("orderInformation", out JsonElement orderInformation) &&
                    orderInformation.TryGetProperty("amountDetails", out JsonElement amountDetails) &&
                    amountDetails.TryGetProperty("totalAmount", out JsonElement totalAmount))
                {
                    if (totalAmount.ValueKind != JsonValueKind.Null)
                    {
                        sessionTransJson.TransactionAmount = totalAmount.GetString();
                        Console.WriteLine($"totalAmount: {totalAmount.GetString()}");
                    }
                    else
                    {
                        Console.WriteLine("totalAmount is null");
                    }
                }
                else
                {
                    Console.WriteLine("totalAmount not found");
                }

            }

        }
        else
        {
            error = "Error: No transaction amount found. Please go back to the checkout page and start a new transaction.";
            showFieldCard = false;
            showResultCard = false;
            StateHasChanged(); // optional
            sessionTransJson!.error = error;
            Navigation.NavigateTo("/errorhandler");
        }


        if (sessionTransJson is not null && sessionTransJson.OriginalTransactionId is not null)
        {
            transactionDisplayId = sessionTransJson.OriginalTransactionId.ToString();
        }
        else if (sessionTransJson is not null && sessionTransJson.TransactionId is not null)
        {
            transactionDisplayId = sessionTransJson.TransactionId.ToString();
        }
        else
        {
            error = "No Transaction ID";
            showFieldCard = false;
            showResultCard = false;
            StateHasChanged(); // optional
            sessionTransJson!.error = error;
            Navigation.NavigateTo("/errorhandler");
        }

        showFieldCard = true;
        StateHasChanged();


        base.OnInitialized();
    }

    private async Task SubmitForVoid()
    {
        try
        {
            sessionTransJson.OriginalTransactionId = transactionDisplayId;
            //TODO - deal with OriginalTransactionId and TransactionId

            if (sessionTransJson.CurrentTransactionType == CcTransactionTypes.CAPTURE)
            {
                sessionTransJson.FollowOnTransaction = CcTransactionTypes.VOID_CAPTURE;
                currentTransaction = CcTransactionTypes.VOID_CAPTURE;
            }

            if (sessionTransJson.CurrentTransactionType == CcTransactionTypes.CREDIT)
            {
                sessionTransJson.FollowOnTransaction = CcTransactionTypes.VOID_CREDIT;
                currentTransaction = CcTransactionTypes.VOID_CREDIT;
            }

            if (sessionTransJson.CurrentTransactionType == CcTransactionTypes.SALE)
            {
                sessionTransJson.FollowOnTransaction = CcTransactionTypes.VOID_SALE;
                currentTransaction = CcTransactionTypes.VOID_SALE;
            }

            if (sessionTransJson.CurrentTransactionType == CcTransactionTypes.REFUND_SALE)
            {
                sessionTransJson.FollowOnTransaction = CcTransactionTypes.VOID_REFUND;
                currentTransaction = CcTransactionTypes.VOID_REFUND;
            }

            // Serialize the object into a string for submission

            var options = new JsonSerializerOptions { WriteIndented = true, DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull };
            string jsonString = JsonSerializer.Serialize(sessionTransJson, options);

            // POST FOR FOLLOW ON TRANSACTION *******

            SessionTransJson sessionResponse = await CallMinAPIs.SubmitForFollowOn(jsonString, 
                _sessionTransactions, currentTransaction!);

            // POST FOR FOLLOW ON TRANSACTION *******

            if (sessionResponse is null)
            {
                showFieldCard = false;
                showResultCard = false;
                StateHasChanged(); // optional
                error = "Session Response is null";
                sessionResponse = new SessionTransJson();
                sessionResponse.JsonTransactionStateValues = TransactionStateValues.Error;
                sessionResponse.error = error;
                sessionTransactions.AddTrans(sessionResponse);
                Navigation.NavigateTo("/errorhandler");
            }

            var jsonNode = sessionResponse.TransactionJson;

            string[] errorKeywords = ["INVALID", "ERROR", "FAILED", "DECLINED", "error", "invalid", "failed", "declined"];

            if (sessionResponse is not null && sessionResponse.TransactionJson is not null)
            {
                basicErrorInfos = JsonErrorExtractor.ExtractErrorObjects(sessionResponse.TransactionJson.ToString());

                containsError = basicErrorInfos.Any(e =>
                    !string.IsNullOrWhiteSpace(e.Status) &&
                    errorKeywords.Any(keyword =>
                        e.Status.Contains(keyword, StringComparison.OrdinalIgnoreCase)));
            }

            if (sessionResponse != null && containsError)
            {
                showFieldCard = false;
                showResultCard = false;
                StateHasChanged(); // optional
                Navigation.NavigateTo("/errorhandler");
            }
            else
            {
                followOnTransResponse = JsonSerializer.Deserialize<FollowOnTransResponse>(jsonNode!.ToString()!);

                propertyValues = PropertiesProcessor.GetProperties(followOnTransResponse!);

                showFieldCard = false;
                showResultCard = true;
            }
        }
        catch (Exception ex)
        {
            error = "Error: " + ex.Message;
            showResultCard = true;
            showFieldCard = false;
        }
    }
}
