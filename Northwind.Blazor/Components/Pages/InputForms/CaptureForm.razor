@rendermode @(new InteractiveServerRenderMode(prerender: false))
@page "/capture"

@inject IHttpClientFactory httpClientFactory
@inject ICartService cartService
@inject ITransactionJson transactionJson
@inject NavigationManager Navigation

@inject ICustomersScoped customersScoped
@inject ISessionTransactions sessionTransactions

<h1>@transactionPageTitle</h1>

<div class="container">
    <div class="row">
        <div class="col-md-12 mb-2">
                <div class="card">
                    <div class="card-body">
                        @if (showFieldCard)
                        {
                            <div class="card-title"><h3>Authorization Data:</h3></div>
                            <div class="row row-cols-2">
                                <div class="col border">
                                    <div>
                                        <label>Transaction Type-Status: </label>
                                    </div>
                                    <div>
                                        <label>Transaction ID: </label>
                                    </div>
                                    <div>
                                        <label>Authorization Amount: </label>
                                    </div>
                                </div>
                                <div class="col border border-secondary">
                                    <div>@sessionTransJson!.TransactionType</div>
                                    <div>@sessionTransJson.TransactionId</div>
                                    <div>
                                        <span>$@sessionTransJson.TransactionAmount</span>
                                    </div>
                                </div>
                            </div>
                            <div class="card-footer">
                                <button class="btn btn-primary" type="button" @onclick="SubmitForCapture">
                                    SUBMIT FOR CAPTURE
                                </button>
                            </div>
                        }
                        @if (showResultCard)
                        {
                            <div class="card">
                                <div class="card-title"><h3>Capture Data:</h3></div>
                                <div class="card-body">
                                    @if (propertyValues != null && propertyValues.Count > 0)
                                    {
                                        <ul>
                                            @foreach (var propertyValue in propertyValues)
                                            {
                                                <li>@propertyValue</li>
                                            }
                                        </ul>
                                    }
                                    else
                                    {
                                        <p>@error</p>
                                    }
                                </div>
                                <div class="card-footer">
                                    <div class="dropdown">
                                        <button class="btn btn-outline-primary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                            Follow on Actions
                                        </button>
                                        <ul class="dropdown-menu">
                                            <li><a class="dropdown-item" href="void">Void</a></li>
                                            <li><a class="dropdown-item" href="checkout">New Checkout</a></li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        }
                </div>
            </div>
        </div>
    </div>
</div>







@code {

    private string transactionPageTitle = "Capture Processing";

    private string error = string.Empty;

    private ISessionTransactions _sessionTransactions = new SessionTransactions();
    private SessionTransJson? sessionTransJson = new SessionTransJson();
    private FollowOnTransResponse? followOnTransResponse = new FollowOnTransResponse();

    private static List<BasicErrorInfo> basicErrorInfos = new List<BasicErrorInfo>();

    private CcTransactionTypes currentTransaction;

    private bool showFieldCard = false;
    private bool showResultCard = false;
    private bool containsError = false;

    string statusNode = string.Empty;
    string id = string.Empty;
    string orderId = string.Empty;

    private List<string> propertyValues = new List<string>();

    protected override void OnInitialized()
    {
        _sessionTransactions = sessionTransactions;

        sessionTransJson = _sessionTransactions.Transactions.LastOrDefault()!;

        if (sessionTransJson is not null)
        {
            showFieldCard = true;
        }

        base.OnInitialized();
    }

    private async Task SubmitForCapture()
    {
        try
        {
            sessionTransJson = _sessionTransactions.Transactions.LastOrDefault()!;
            sessionTransJson.CurrentTransactionType = CcTransactionTypes.CAPTURE;
            sessionTransJson.FollowOnTransaction = CcTransactionTypes.CAPTURE;
            currentTransaction = CcTransactionTypes.CAPTURE;

            propertyValues = new();

            // Serialize the object into a string for submission

            var options = new JsonSerializerOptions { WriteIndented = true, DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull };
            string jsonString = JsonSerializer.Serialize(sessionTransJson, options);

            // POST FOR FOLLOW ON TRANSACTION *******

            SessionTransJson sessionResponse = await CallMinAPIs.SubmitForFollowOn(jsonString, 
                _sessionTransactions, currentTransaction!);

            // POST FOR FOLLOW ON TRANSACTION *******

            if (sessionResponse is null)
            {
                showFieldCard = false;
                showResultCard = false;
                StateHasChanged(); // optional
                error = "Session Response is null";
                sessionResponse = new SessionTransJson();
                sessionResponse.JsonTransactionStateValues = TransactionStateValues.Error;
                sessionResponse.error = error;
                sessionTransactions.AddTrans(sessionResponse);
                Navigation.NavigateTo("/errorhandler");
            }

            var jsonNode = sessionResponse.TransactionJson;

            string[] errorKeywords = ["INVALID", "ERROR", "FAILED", "DECLINED", "invalid", "error", "failed", "declined"];

            if (sessionResponse is not null && sessionResponse.TransactionJson is not null)
            {
                basicErrorInfos = JsonErrorExtractor.ExtractErrorObjects(sessionResponse.TransactionJson.ToString());

                containsError = basicErrorInfos.Any(e =>
                    !string.IsNullOrWhiteSpace(e.Status) &&
                    errorKeywords.Any(keyword =>
                        e.Status.Contains(keyword, StringComparison.OrdinalIgnoreCase)));
            }

            if (sessionResponse != null && containsError)
            {
                showFieldCard = false;
                showResultCard = false;
                StateHasChanged(); // optional
                Navigation.NavigateTo("/errorhandler");
            }
            else
            {
                followOnTransResponse = JsonSerializer.Deserialize<FollowOnTransResponse>(jsonNode!.ToString()!);

                propertyValues = PropertiesProcessor.GetProperties(followOnTransResponse!);

                showFieldCard = false;
                showResultCard = true;
            }
        }
        catch (Exception ex)
        {
            error = "Error: " + ex.Message;
            showResultCard = true;
            showFieldCard = false;
        }
    }
}


    
    

