@rendermode @(new InteractiveServerRenderMode(prerender: false))
@page "/cloudposcancel"


@inject IHttpClientFactory httpClientFactory
@inject ICartService cartService
@inject ITransactionJson transactionJson
@inject NavigationManager Navigation


@inject ICustomersScoped customersScoped
@inject ISessionTransactions sessionTransactions


@code {

    private string transactionPageTitle = string.Empty;

    private string error = string.Empty;

    private ISessionTransactions _sessionTransactions = new SessionTransactions();
    private SessionTransJson sessionTransJson = new SessionTransJson();
    private CloudPaymentResponseJson cloudPaymentResponseJson = new();
    private JwtPayload tokenPayload = new JwtPayload();
    private BearerTokenDto bearerTokenDto = new BearerTokenDto();
    private B2cCustomer b2CCustomer = new();

    private string bearerToken = string.Empty;

    private bool showResultCard = false;

    string statusNode = string.Empty;
    string id = string.Empty;
    string orderId = string.Empty;

    private List<string> propertyValues = new List<string>();

    private JsonNode? _transactionJson = null;

    protected async override Task OnInitializedAsync()
    {
        _sessionTransactions = sessionTransactions;

        sessionTransJson = _sessionTransactions.Transactions.LastOrDefault()!;

        transactionPageTitle = sessionTransJson.CurrentTransactionType.ToString() + ": Follow on Transaction";

        await SubmitForFollowOn();

        base.OnInitialized();
    }

    private async Task SubmitForFollowOn()
    {
        try
        {

            string emptyJson = "{}";

            CcTransactionTypes ccTransactionType = CcTransactionTypes.CLOUD_POS_BEARER_CREATE;

            // Serialize the object into a string for submission

            var options = new JsonSerializerOptions { WriteIndented = true, DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull };
            string jsonString = JsonSerializer.Serialize(emptyJson, options);

            // POST FOR CLOUD POS BEARER CREATE TRANSACTION *******

            SessionTransJson sessionBearerResponse = await CallMinAPIs.SubmitForFollowOn(jsonString, 
                _sessionTransactions, ccTransactionType);

            // POST FOR CLOUD POS BEARER CREATE TRANSACTION *******

            if (sessionBearerResponse != null && sessionBearerResponse.TransactionStatus != null && sessionBearerResponse.TransactionStatus.Contains("error"))
            {
                error = "Error: " + sessionBearerResponse.TransactionJson;
                sessionBearerResponse!.error = error;
                sessionTransactions.AddTrans(sessionBearerResponse);
                Navigation.NavigateTo("/errorhandler");
            }
            else if (sessionBearerResponse != null && sessionBearerResponse.TransactionJson != null && sessionBearerResponse.JsonTransactionStateValues == TransactionStateValues.Complete)
            {
                bearerTokenDto = JsonSerializer.Deserialize<BearerTokenDto>(sessionBearerResponse.TransactionJson)!;
                bearerToken = bearerTokenDto.BearerToken!;
            }
            else
            {
                error = "Error: No response from server";
                StateHasChanged();
            }

            string transJsonString = JsonSerializer.Serialize(sessionTransJson, options);

            sessionTransJson.OriginalTransactionType = CcTransactionTypes.CLOUD_POS_BEARER_SALE;
            sessionTransJson.CurrentTransactionType = CcTransactionTypes.CLOUD_POS_CANCEL;

            sessionTransJson.Customer = new B2cCustomer();
            sessionTransJson.Customer.BearerToken = "";

            sessionTransJson!.Customer!.BearerToken = bearerToken;
            sessionTransJson!.Customer!.CloudPosType = "CancelRequest";

            // POST FOR FOLLOW ON TRANSACTION *******

            jsonString = JsonSerializer.Serialize(sessionTransJson!.Customer!);

            SessionTransJson sessionResponse = await CallMinAPIs.SubmitForFollowOn(jsonString, 
                _sessionTransactions, (CcTransactionTypes)sessionTransJson.CurrentTransactionType);

            // POST FOR FOLLOW ON TRANSACTION *******

            if (sessionResponse != null && sessionResponse.TransactionJson != null && sessionResponse.JsonTransactionStateValues == TransactionStateValues.Error)
            {

                var jsonNode = sessionResponse.TransactionJson;

                string statusNode = (string)jsonNode!["message"]! ?? "ERROR IN PROCESSING";

                error = "Error: " + statusNode;
                sessionResponse = new();
                sessionResponse!.error = error;
                sessionTransactions.AddTrans(sessionResponse);
                Navigation.NavigateTo("/errorhandler");

            }
            else if (sessionResponse != null && sessionResponse.TransactionJson != null && sessionResponse.JsonTransactionStateValues == TransactionStateValues.Complete)
            {
                _transactionJson = sessionResponse.TransactionJson;
                sessionResponse.Customer = b2CCustomer;

                sessionTransactions.AddTrans(sessionResponse);
                Navigation.NavigateTo("/cloudposresponse");
            }
            else
            {
                error = "Error: " + "No or bad response from server";
                sessionResponse = new();
                sessionResponse!.error = error;
                sessionTransactions.AddTrans(sessionResponse);
                Navigation.NavigateTo("/errorhandler");
            }
        }
        catch (Exception ex)
        {
            error = "Error: " + ex.Message;
            showResultCard = true;
            //showFieldCard = false;
        }
    }
}

