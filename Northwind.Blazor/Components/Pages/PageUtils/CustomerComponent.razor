@rendermode @(new InteractiveServerRenderMode(prerender: false))

@inject NavigationManager Navigation
@inject ISessionTransactions sessionTransactions
@inject ICardService cardService


@if (!ShowProcessing)
{
    @if (FormElements is not null)
    {
        @if (SafeFormElements.Contains("ShowCreateToken"))
        {
            <FormSection Title="Use Defaults" HelpText="">
                <div class="row">
                    <div class="col d-flex">
                        <div class="col-8">
                            <label class="form-check-label me-2" for="useDefaults"><b>Use Defaults:</b></label>
                        </div>
                        <div class="col-3 border d-flex justify-content-center align-items-center">
                            <input type="checkbox" @bind="IsChecked" @onclick="PopulateForm" class="form-check-input" id="useDefaults" />
                        </div>
                    </div>
                    <div class="col d-flex">
                        @if (IsChecked)
                        {
                            <button class="w-100 btn btn-primary btn-lg" @onclick="HandleValidSubmit">@ButtonText</button>
                        }
                    </div>
                    <div class="col d-flex">
                        @if (error is not null)
                        {
                            <div class="col-6">
                                <strong class="alert-danger">@error</strong>
                            </div>
                            <div class="dropdown">
                                <button class="btn btn-outline-primary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    Follow on Actions
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="tokencreate">New Token Create</a></li>
                                    <li><a class="dropdown-item" href="checkout">New Checkout</a></li>
                                </ul>
                            </div>
                        }
                        else
                        {
                            <div class="col-8">
                                <label class="form-check-label me-2" for="includeAuth"><b>Include Auth:</b></label>
                            </div>
                            <div class="col-3 border d-flex justify-content-center align-items-center">
                            <input type="checkbox"
                               class="form-check-input"
                               id="includeAuth"
                               @bind-value="IncludeAuth"
                               @bind-value:event="onchange" />
                            </div>
                        }
                    </div>
                </div>
            </FormSection>
            <FormSection>
                <div class="row">
                    <div class="col d-flex">
                        <div class="col me-2 justify-content-center align-items-center">
                            <label class="form-check-label" for="instrumentID"><b>Instrument ID</b></label>
                        </div>
                        <div class="col-2 me-2 border d-flex justify-content-center align-items-center">
                            <input type="checkbox" @bind="InstIdChecked" class="form-check-input" id="instrumentID" />
                        </div>
                    </div>
                    <div class="col d-flex">
                        <div class="col me-2 justify-content-center align-items-center">
                            <label class="form-check-label" for="customerInst"><b>Customer Inst</b></label>
                        </div>
                        <div class="col-2 me-2 border d-flex justify-content-center align-items-center">
                            <input type="checkbox" @bind="CustInstChecked" class="form-check-input" id="customerInst" />
                        </div>
                    </div>
                    <div class="col d-flex">
                        <div class="col me-2 justify-content-center align-items-center">
                            <label class="form-check-label" for="paymentInst"><b>Payment Inst</b></label>
                        </div>
                        <div class="col-2 me-2 border d-flex justify-content-center align-items-center">
                            <input type="checkbox" @bind="PayInstChecked" class="form-check-input" id="paymentInst" />
                        </div>
                    </div>
                    <div class="col d-flex">
                        <div class="col me-2 justify-content-center align-items-center">
                            <label class="form-check-label" for="instrumentID"><b>Shipping Inst</b></label>
                        </div>
                        <div class="col-2 me-2 border d-flex justify-content-center align-items-center">
                            <input type="checkbox" @bind="ShippingInstChecked" class="form-check-input" id="shippingInst" />
                        </div>
                    </div>
                </div>
                <div class="row g-3">
                    <div class="col-12">
                        <label for="orderId" class="form-label">Order Id: </label>

                        @if (customer?.OrderId is not null)
                        {
	                        <SafeInputText TModel="B2cCustomer"
				                           Model="customer"
				                           Value="@customer.OrderId"
				                           ValueChanged="@(v => customer.OrderId = v)"
				                           Id="orderId"
				                           CssClass="form-control"
				                           Placeholder="Enter Order ID" />
                        }
                    </div>
                    @if (CustInstChecked == false && (ShippingInstChecked || PayInstChecked))
                    {
                        <div class="col-12">

                            <label for="customerInstrumentId" class="form-label">Customer Instrument Id: </label>

                            @if (customer?.CustomerInstrumentId is not null)
                            {
	                            <SafeInputText TModel="B2cCustomer"
				                                Model="customer"
				                                Value="@customer.CustomerInstrumentId"
				                                ValueChanged="@(v => customer.CustomerInstrumentId = v)"
				                                Id="customerInstrumentId"
				                                CssClass="form-control"
				                                Placeholder="Customer Inst ID" />
                            }

                        </div>
                    }
                    @if ((CustInstChecked) || (customer!.B2cCustomerId > 0))
                    { 
                        <div class="col-12">

                            <label for="merchantCustomerID" class="form-label">Merchant Instrument Id: </label>

                            @if (customer?.MerchantCustomerID is not null)
                            {
	                            <SafeInputText TModel="B2cCustomer"
				                                Model="customer"
				                                Value="@customer.MerchantCustomerID"
				                                ValueChanged="@(v => customer.MerchantCustomerID = v)"
				                                Id="merchantCustomerID"
				                                CssClass="form-control"
				                                Placeholder="Merchant Inst ID" />
                            }

                        </div>
                        <div class="col-12">

                            <label for="b2cCustomerId" class="form-label">Customer Id: </label>

                            @if (customer?.B2cCustomerId is not null)
                            {
                                <SafeInputNumber TModel="B2cCustomer" TValue="int"
                                    Model="customer"
                                    Value="@customer.B2cCustomerId"
                                    ValueChanged="@(v => customer.B2cCustomerId = v)"
                                    Id="b2cCustomerId"
                                    CssClass="form-control"
                                    Placeholder="Customer ID" />
                            }
                        </div>
                    }
                </div>
            </FormSection>
        }

        @if (SafeFormElements.Contains("ShowStandaloneCredit") || SafeFormElements.Contains("ShowAuthCapture") || SafeFormElements.Contains("ShowDefaults"))
        {
            <!-- The below FormSection allows users to choose default values for a Credit/Auth transaction-->
            <FormSection Title="Use Defaults" HelpText="">
                <div class="row">
                    <div class="col d-flex">
                        <div class="col-8">
                            <label class="form-check-label me-2" for="useDefaults"><b>Use Defaults:</b></label>
                        </div>
                        <div class="col-3 border d-flex justify-content-center align-items-center">
                            <input type="checkbox" @bind="IsChecked" @onclick="PopulateForm" class="form-check-input" id="useDefaults" />
                        </div>
                    </div>
                    <div class="col d-flex">
                        @if (IsChecked)
                        {
                            <button class="w-100 btn btn-primary btn-lg" @onclick="HandleValidSubmit">@ButtonText</button>
                        }
                    </div>
                    <div class="col d-flex">
                        @if (newTransaction && SafeFormElements.Contains("ShowAuthCapture"))
                        {
                            <div class="col d-flex">
                                <div class="col-8">
                                    <label class="form-check-label me-2" for="markForCapture"><b>Capture:</b></label>
                                </div>
                                <div class="col-3 border d-flex justify-content-center align-items-center">
                                    @if (customer is not null)
                                    {
                                        <InputCheckbox @bind-Value="customer.MarkedForCapture" class="form-check-input" id="markForCapture" />
                                    }
                                </div>
                            </div>
                        }
                        @if (ShowPosCancel)
                        {
                            <button class="w-100 btn btn-primary btn-lg" @onclick="HandleValidCloudPosCancel">CANCEL CLOUD POS TRANSACTION</button>
                        }
                        @if (error is not null)
                        {
                            <div class="col-6">
                                <strong class="alert-danger">@error</strong>
                            </div>
                            <div class="dropdown">
                                <button class="btn btn-outline-primary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    Follow on Actions
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="tokencreate">New Token Create</a></li>
                                    <li><a class="dropdown-item" href="checkout">New Checkout</a></li>
                                </ul>
                            </div>
                        }
                        @if (SafeFormElements.Contains("ShowCloudPos"))
                        {
                            <div class="col-8">
                                <label class="form-check-label me-2" for="showPosMoto"><b>MOTO Auth:</b></label>
                            </div>
                            <div class="col-2 me-2 border d-flex justify-content-center align-items-center">
                                <input type="checkbox" @bind="ShowPosMoto" class="form-check-input" id="showPosMoto" />
                            </div>
                        }
                    </div>
                </div>
            </FormSection>
        }

        @if (SafeFormElements.Contains("ShowMainForm"))
        {
            <div>
                <div class="row g-5">
                    <!-- The below FormSection is for Billing Address and Payment entry-->
                    @if(SafeFormElements.Contains("ShowCart"))
                    {
                        <div class="col-md-5 col-lg-4 order-md-last">
                            <!-- The below FormSection shows Shopping Cart items-->
                            <h4 class="d-flex justify-content-between align-items-center mb-3">
                                <span class="text-primary">Your cart</span>
                                @if (cartService is null)
                                {
                                    <span class="badge bg-primary rounded-pill">
                                        0
                                    </span>
                                }
                                else
                                {
                                    <span class="badge bg-primary rounded-pill">
                                        @cartService.cart.Count
                                    </span>
                                }
                            </h4>
                            <FormSection>
                                @if (cartService is null)
                                { }
                                else
                                {
                                    @foreach (var item in cartService.cart)
                                    {
                                        <ul class="list-group mb-3">
                                            <li class="list-group-item d-flex justify-content-between lh-sm">
                                                <div>
                                                    <h6 class="my-0"><b>Product name:</b> @item.ProductName</h6>
                                                    <small class="text-body-secondary">Product ID: @item.ProductId</small>
                                                    <span class="text-body-secondary">$@item.UnitPrice?.ToString("0.00")</span>
                                                </div>
                                            </li>
                                        </ul>
                                    }
                                }
                                <li class="list-group-item d-flex justify-content-between">
                                    <span>Total (USD)</span>
                                    @if (cartService is null)
                                    { }
                                    else
                                    {
                                        <strong>$@cartService.TotalPrice?.ToString("0.00")</strong>
                                    }
                                </li>
                            </FormSection>
                            <!-- The below form is for Promo redemption-->
                            <form class="card p-2">
                                <div class="input-group">
                                    <input type="text" class="form-control" placeholder="Promo code">
                                    <button type="submit" class="btn btn-secondary">Redeem</button>
                                </div>
                            </form>
                        </div>
                    }
                    <br />


                    <br />
                    <h4 class="mb-1">Billing address</h4>

                    <div class="col-md-7 col-lg-8">
                        <FormSection Title="Billing Details" HelpText="">
                            <EditForm Model="customer" OnValidSubmit="HandleValidSubmit">
                                @if (SafeFormElements.Contains("ShowPreAuth") || SafeFormElements.Contains("ShowOnReaderTip"))
                                {
                                    <hr class="my-4">

                                    <InputRadioGroup @bind-Value="@customer!.PreAuthOrOnDeviceTip">
                                        <h4 class="mb-3">Pre-Auth Only, Pre-Auth Tipping or On Device Tipping</h4>
                                        @foreach (var value in preAuthOrOnDevice)
                                        {
                                            <div class="form-check">
                                                <InputRadio Value="@value" />
                                                @value
                                            </div>
                                        }
                                    </InputRadioGroup>

                                    <hr class="my-4">
                                }

                                @if (SafeFormElements.Contains("ShowBilling"))
                                {
                                    <div class="row g-3">
                                        <div class="col-sm-6">
                                       
                                            <label for="firstName" class="form-label">First Name: </label>

                                            @if (customer is not null)
                                            {
                                                <SafeInputText TModel="B2cCustomer"
                                                                Model="customer"
                                                                Value="@customer.FirstName"
                                                                ValueChanged="@(v => customer.FirstName = v)"
                                                                Id="firstName"
                                                                CssClass="form-control"
                                                                Placeholder="First Name" />
                                            }

                                            <ValidationMessage For="() => customer!.FirstName" />

                                        </div>

                                        <div class="col-sm-6">

                                            <label for="lastName" class="form-label">Last Name: </label>

                                            @if (customer is not null)
                                            {
	                                            <SafeInputText TModel="B2cCustomer"
				                                                Model="customer"
				                                                Value="@customer.LastName"
				                                                ValueChanged="@(v => customer.LastName = v)"
				                                                Id="lastName"
				                                                CssClass="form-control"
				                                                Placeholder="Last Name" />
                                            }

                                            <ValidationMessage For="() => customer!.LastName" />

                                        </div>
                                        <div class="col-12">

                                            <label for="email" class="form-label">Email: </label>

                                            @if (customer is not null)
                                            {
	                                            <SafeInputText TModel="B2cCustomer"
				                                                Model="customer"
				                                                Value="@customer.Email"
				                                                ValueChanged="@(v => customer.Email = v)"
				                                                Id="email"
				                                                CssClass="form-control"
				                                                Placeholder="Email" />
                                            }
                                            <ValidationMessage For="() => customer!.Email" />

                                        </div>

                                        <div class="col-12">

                                            <label for="address" class="form-label">Address1: </label>

                                            @if (customer is not null)
                                            {
	                                            <SafeInputText TModel="B2cCustomer"
				                                                Model="customer"
				                                                Value="@customer.Address1"
				                                                ValueChanged="@(v => customer.Address1 = v)"
				                                                Id="email"
				                                                CssClass="form-control"
				                                                Placeholder="Address1" />
                                            }

                                            <ValidationMessage For="() => customer!.Address1" />

                                        </div>

                                        <div class="col-12">

                                            <label for="address2" class="form-label">Address2: </label>

                                            @if (customer is not null)
                                            {
	                                            <SafeInputText TModel="B2cCustomer"
				                                                Model="customer"
				                                                Value="@customer.Address2"
				                                                ValueChanged="@(v => customer.Address2 = v)"
				                                                Id="address2"
				                                                CssClass="form-control"
				                                                Placeholder="Address2" />
                                            }

                                        </div>
                                    </div>
                                    <div class="col-md-9">

                                        <label for="city" class="form-label">City: </label>

                                        @if (customer is not null)
                                        {
	                                        <SafeInputText TModel="B2cCustomer"
				                                            Model="customer"
				                                            Value="@customer.City"
				                                            ValueChanged="@(v => customer.City = v)"
				                                            Id="city"
				                                            CssClass="form-control"
				                                            Placeholder="city" />
                                        }

                                    </div>
                                    <div class="col-md-9">

                                        <label for="city" class="form-label">City: </label>

                                        @if (customer is not null)
                                        {
	                                        <SafeInputText TModel="B2cCustomer"
				                                            Model="customer"
				                                            Value="@customer.AdministrativeArea"
				                                            ValueChanged="@(v => customer.AdministrativeArea = v)"
				                                            Id="administrativeArea"
				                                            CssClass="form-control"
				                                            Placeholder="administrativeArea" />
                                        }

                                    </div>
                                    <div class="col-md-9">

                                        <label for="postalCode" class="form-label">Zip/Postal Code: </label>

                                        @if (customer is not null)
                                        {
	                                        <SafeInputText TModel="B2cCustomer"
				                                            Model="customer"
				                                            Value="@customer.PostalCode"
				                                            ValueChanged="@(v => customer.PostalCode = v)"
				                                            Id="postalCode"
				                                            CssClass="form-control"
				                                            Placeholder="postalCode" />
                                        }

                                    </div>
                                    <div class="col-md-9">

                                        <label for="country" class="form-label">Country: </label>

                                        @if (customer is not null)
                                        {
	                                        <SafeInputText TModel="B2cCustomer"
				                                            Model="customer"
				                                            Value="@customer.Country"
				                                            ValueChanged="@(v => customer.Country = v)"
				                                            Id="country"
				                                            CssClass="form-control"
				                                            Placeholder="country" />
                                        }

                                        <ValidationMessage For="() => customer!.Country" />
                                    </div>
                                }
                                @if (SafeFormElements.Contains("ShowAuthCapture"))
                                {
                                    <hr class="my-4">

                                    <div class="form-check border">
                                        <InputCheckbox @bind-Value="customer!.ShippingSameAsBilling" class="form-check-input" id="same-address" />
                                        <label class="form-check-label" for="same-address">Shipping address is the same as my billing address</label>
                                    </div>

                                    <div class="form-check border">
                                        <InputCheckbox @bind-Value="customer!.SaveFormData" class="form-check-input" id="save-info" />
                                        <label class="form-check-label" for="save-info">Save this information for next time</label>
                                    </div>
                                }


                                @if (SafeFormElements.Contains("ShowAccountDetails"))
                                {
                                    <hr class="my-4">

                                    <InputRadioGroup @bind-Value="@customer!.PaymentMethod">
                                        <h4 class="mb-3">Payment</h4>
                                        @foreach (var method in paymentMethods)
                                        {
                                            <div class="form-check">
                                                <InputRadio Value="@method" />
                                                @method
                                            </div>
                                        }
                                    </InputRadioGroup>

                                    <hr class="my-4">

                                    <div class="d-flex">
                                        <div class="col-md-6 me-2">
                                            <label for="cc-name" class="form-label">Name on card</label>
                                            <InputText @bind-Value="customer.FullName" class="form-control" id="cc-name" placeholder="" />
                                            <small class="text-body-secondary">Full name as displayed on card</small>
                                            <ValidationMessage For="() => customer.FullName" />
                                        </div>
                                        <div class="col-md-6 me-2">
                                            <label for="cc-number" class="form-label">Credit card number</label>
                                            <InputText @bind-Value="customer.AccountNumber" class="form-control" id="cc-number" placeholder="" />
                                            <ValidationMessage For="() => customer.AccountNumber" />
                                        </div>
                                    </div>

                                    <div class="d-flex">
                                        <div class="col-md-3 me-auto">
                                            <label for="cc-exp-month" class="form-label">Exp Month</label>
                                            <InputText @bind-Value="customer.ExpMonth" class="form-control" id="cc-exp-month" placeholder="" />
                                            <ValidationMessage For="() => customer.ExpMonth" />
                                        </div>
                                        <div class="col-md-3 me-auto">
                                            <label for="cc-exp-year" class="form-label">Exp Year</label>
                                            <InputText @bind-Value="customer.ExpYear" class="form-control" id="cc-exp-year" placeholder="" />
                                            <ValidationMessage For="() => customer.ExpYear" />
                                        </div>
                                        <div class="col-md-3 me-auto">
                                            <label for="cc-cvv" class="form-label">CVV</label>
                                            <InputText @bind-Value="customer.Cvv" class="form-control" id="cc-cvv" placeholder="" />
                                            <ValidationMessage For="() => customer.Cvv" />
                                        </div>
                                    </div>
                                }
                                <hr class="my-4">

                                @if (SafeFormElements.Contains("ShowInvoice"))
                                {

                                    <InputRadioGroup @bind-Value="@customer!.InvoiceType">
                                        <h4 class="mb-3">Invoice Type</h4>
                                        @foreach (var type in invoiceType)
                                        {
                                            <div class="form-check">
                                                <InputRadio Value="@type" />
                                                @type
                                            </div>
                                        }
                                    </InputRadioGroup>

                                    <hr class="my-4">

                                    <div class="row g-3">
                                        <div class="col-sm-6">
                                            <label for="companyName" class="form-label">Company Name</label>
                                            <InputText @bind-Value="customer.CompanyName" class="form-control" id="companyName" placeholder="" />
                                        </div>
                                        <div class="col-sm-6">
                                            <label for="invoiceNumber" class="form-label">Invoice Number</label>
                                            <InputText @bind-Value="customer.InvoiceInformation!.InvoiceNumber" class="form-control" id="invoiceNumber" placeholder="" />
                                        </div>
                                        <div class="col-sm-6">
                                            <label for="description" class="form-label">Description</label>
                                            <InputText @bind-Value="customer.InvoiceInformation.Description" class="form-control" id="description" placeholder="" />
                                        </div>
                                        <div class="col-sm-6">
                                            <label for="dueDate" class="form-label">Due Date</label>
                                            <InputText @bind-Value="customer.InvoiceInformation.DueDate" class="form-control" id="dueDate" placeholder="" />
                                        </div>
                                        <div class="col-sm-6">
                                            <label for="deliveryMode" class="form-label">Delivery Mode</label>
                                            <InputText @bind-Value="customer.InvoiceInformation.DeliveryMode" class="form-control" id="deliveryMode" placeholder="" />
                                        </div>
                                        <div class="col-sm-6">
                                            <label for="allowPartialPayments" class="form-label">Allow Partial Payments</label>
                                            <InputText @bind-Value="customer.InvoiceInformation.AllowPartialPayments" class="form-control" id="allowPartialPayments" placeholder="" />
                                        </div>
                                        <div class="col-sm-6">
                                            <label for="discountAmount" class="form-label">Discount Amount</label>
                                            <InputText @bind-Value="customer.AmountDetails!.DiscountAmount" class="form-control" id="discountAmount" placeholder="" />
                                        </div>
                                        <div class="col-sm-6">
                                            <label for="discountPercent" class="form-label">Discount Percent</label>
                                            <InputText @bind-Value="customer.AmountDetails.DiscountPercent" class="form-control" id="discountPercent" placeholder="" />
                                        </div>
                                        <div class="col-sm-6">
                                            <label for="subAmount" class="form-label">Sub Amount</label>
                                            <InputText @bind-Value="customer.AmountDetails.SubAmount" class="form-control" id="subAmount" placeholder="" />
                                        </div>
                                        <div class="col-sm-6">
                                            <label for="minimumPartialAmount" class="form-label">Minimum Partial Amount</label>
                                            <InputText @bind-Value="customer.AmountDetails.MinimumPartialAmount" class="form-control" id="minimumPartialAmount" placeholder="" />
                                        </div>
                                        <div class="col-sm-6">
                                            <label for="taxDetailsType" class="form-label">Tax Details Type</label>
                                            <InputText @bind-Value="customer.TaxDetailsType" class="form-control" id="taxDetailsType" placeholder="" />
                                        </div>
                                        <div class="col-sm-6">
                                            <label for="taxDetailsAmount" class="form-label">Tax Details Amount</label>
                                            <InputText @bind-Value="customer.TaxDetailsAmount" class="form-control" id="taxDetailsAmount" placeholder="" />
                                        </div>
                                        <div class="col-sm-6">
                                            <label for="taxDetailsRate" class="form-label">Tax Details Rate</label>
                                            <InputText @bind-Value="customer.TaxDetailsRate" class="form-control" id="taxDetailsRate" placeholder="" />
                                        </div>
                                        <div class="col-sm-6">
                                            <label for="taxDetailsRate" class="form-label">Tax Details Rate</label>
                                            <InputText @bind-Value="customer.TaxDetailsRate" class="form-control" id="taxDetailsRate" placeholder="" />
                                        </div>
                                        <div class="col-sm-6">
                                            <label for="freightTaxable" class="form-label">Taxable Freight</label>
                                            <InputText @bind-Value="customer.Freight!.Taxable" class="form-control" id="freightTaxable" placeholder="" />
                                        </div>
                                        <div class="col-sm-6">
                                            <label for="freightTaxRate" class="form-label">Freight Tax Rate</label>
                                            <InputText @bind-Value="customer.Freight.TaxRate" class="form-control" id="freightTaxRate" placeholder="" />
                                        </div>
                                        <div class="col-sm-6">
                                            <label for="lineItemsProductSku" class="form-label">Product SKU</label>
                                            <InputText @bind-Value="customer.LineItem!.ProductSku" class="form-control" id="lineItemsProductSku" placeholder="" />
                                        </div>
                                        <div class="col-sm-6">
                                            <label for="lineItemsDiscountAmount" class="form-label">Discount Amount for Line Items</label>
                                            <InputNumber @bind-Value="customer.LineItem.DiscountAmount" class="form-control" id="lineItemsDiscountAmount" placeholder="" />
                                        </div>
                                        <div class="col-sm-6">
                                            <label for="lineItemsDiscountRate" class="form-label">Line Item Discount Rate</label>
                                            <InputNumber @bind-Value="customer.LineItem.DiscountRate" class="form-control" id="lineItemsTaxRate" placeholder="" />
                                        </div>
                                        <div class="col-sm-6">
                                            <label for="lineItemsTaxAmount" class="form-label">Line Items Tax Amount</label>
                                            <InputNumber @bind-Value="customer.LineItem.TaxAmount" class="form-control" id="lineItemsTaxAmount" placeholder="" />
                                        </div>
                                    </div>
                                }

                                <hr class="my-4">

                                <button class="w-100 btn btn-primary btn-lg" type="submit">@ButtonText</button>

                                <DataAnnotationsValidator />
                                <ValidationSummary />

                            </EditForm>
                        </FormSection>
                    </div>
                </div>
                @if (error is not null)
                {
                    <div class="col-6">
                        <strong class="alert-danger">@error</strong>
                    </div>
                    <div class="dropdown">
                        <button class="btn btn-outline-primary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                            Follow on Actions
                        </button>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="tokencreate">New Token Create</a></li>
                            <li><a class="dropdown-item" href="checkout">New Checkout</a></li>
                        </ul>
                    </div>
                }
            </div>

        }
    }
    else
    {
        <p>Loading...</p>
    }
}
else
{
    <div class="text-center">
        <h3>Processing...</h3>
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}



@code {

    private bool IsChecked { get; set; } = false;
    private bool IncludeAuth { get; set; } = false;
    public bool InstIdChecked { get; set; } = false;
    public bool ShippingInstChecked { get; set; } = false;
    public bool PayInstChecked { get; set; } = false;
    public bool CustInstChecked { get; set; } = false;
    public bool newTransaction { get; set; } = true;
    private bool ShowPosCancel { get; set; } = false;
    private bool ShowPosMoto { get; set; } = false;
    private bool ShowProcessing { get; set; } = false;

    public enum Option
    {
        First,
        Second,
        Third
    }

    private string SelectedOption { get; set; } = "First";

    private decimal? FormAmount = 0;

    private string[] paymentMethods = new string[] { "Credit/Debit", "PayPal" };

    private string[] preAuthOrOnDevice = new string[] { "Standard", "PreAuthOnly" ,"PreAuthTip", "OnDeviceTip" };

    private string[] invoiceType = new string[] { "Draft", "SendImmediately" };

    private List<string> TokenTypes = new();

    [Parameter]
    public string? ButtonText { get; set; }

    [Parameter]
    public B2cCustomer? FormCustomer { get; set; }

    [Parameter, EditorRequired]
    public List<string>? FormElements { get; set; } = new();

    private List<string> SafeFormElements => FormElements ?? new List<string>();

    [Parameter]
    public EventCallback<B2cCustomer> ValidSubmit { get; set; }

    [SupplyParameterFromForm]
    public B2cCustomer? customer { get; set; }

    private string? error;

    Decimal? localMinimumPartialAmount = 0;

    private JsonNode? _transactionJson = null;

    private List<PayerAuthCardSampleDto> _cardList = new();

    private DBRandomCart cartService = new DBRandomCart();

    private ISessionTransactions _sessionTransactions = new SessionTransactions();

    private SampleInvoiceDetailDto sampleInvoiceDetailDto = new SampleInvoiceDetailDto();
    private LineItems lineItem = new LineItems();

    private List<SampleInvoiceDetailDto> sampleInvoiceDetailDtos = new List<SampleInvoiceDetailDto>();

    protected override void OnParametersSet()
    {
        if (cardService is not null && cardService.Cards is not null)
        {
            _cardList = cardService.Cards.ToList();
        }
        else
        {

            Console.WriteLine("No cards found in card list - Is Practicle Apps Server Running");
            error = "No cards found in card list - Is Practicle Apps Server Running";
            SessionTransJson sessionResponse = new();
            sessionResponse!.error = error;
            sessionTransactions.AddTrans(sessionResponse);
            Navigation.NavigateTo("/errorhandler");
        }



        if (FormCustomer is not null)
        {
            customer = FormCustomer;
        }
        else if (customer is null)
        {
            customer = new B2cCustomer();
            customer.InvoiceInformation = new();
            customer.AmountDetails = new();
            customer.Freight = new();
            customer.LineItem = new();
        }

        EnsureCustomerInitialized();

        try 
        {
            if (FormElements is null)
            {
                Console.WriteLine($"FormElements is null? {FormElements is null}");
                throw new InvalidOperationException("FormElements must be provided by the parent component.");
            }
            else
            {
                Console.WriteLine($"FormElements is not null?");
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
            error = "Error: " + ex.Message;
            SessionTransJson sessionResponse = new();
            sessionResponse!.error = error;
            sessionTransactions.AddTrans(sessionResponse);
            Navigation.NavigateTo("/errorhandler");
        }
    }

    protected override void OnInitialized()
    {

        if (FormCustomer is not null)
        {
            customer = FormCustomer;
        }
        else if (customer is null)
        {
            customer = new B2cCustomer();
            customer.InvoiceInformation = new();
            customer.AmountDetails = new();
            customer.Freight = new();
            customer.LineItem = new();
        }

        EnsureCustomerInitialized();

        try 
        {
            if (customer == null)
            {
                customer = new B2cCustomer();
                customer.InvoiceInformation = new();
                customer.AmountDetails = new();
                customer.Freight = new();
                customer.LineItem = new();
            }

            if (FormCustomer is not null)
            {
                customer = FormCustomer;
                customer.InvoiceInformation = new();
                customer.AmountDetails = new();
                customer.Freight = new();
                customer.LineItem = new();

            }

            if (SafeFormElements.Contains("ShowTmsToken") && FormCustomer is not null 
                && FormCustomer.InstrumentIdentifier is not null)
            { 
                customer.InstrumentIdentifier = FormCustomer.InstrumentIdentifier;
            }


            _sessionTransactions = sessionTransactions;

        }
        catch (Exception ex)
        {
            error = ex.Message;
            error = "Error: " + ex.Message;
            SessionTransJson sessionResponse = new();
            sessionResponse!.error = error;
            sessionTransactions.AddTrans(sessionResponse);
            Navigation.NavigateTo("/errorhandler");
        }

        StateHasChanged();
    }

    public void HandleValidCloudPosCancel()
    {
        Navigation.NavigateTo("/cloudposcancel");
    }

    public async Task HandleValidSubmit()
    {
        await Task.Delay(1);

        //IncludeAuth = false;
        //IsChecked = false;
        //InstIdChecked  = false;
        //ShippingInstChecked  = false;
        //PayInstChecked  = false;
        //CustInstChecked  = false;
        newTransaction  = false;
        ShowPosCancel  = false;
        ShowPosMoto  = false;
        ShowProcessing  = true;

        await Task.Yield();

        StateHasChanged();

        try 
        {
            if (customer is not null && customer.PreAuthOrOnDeviceTip == "PreAuthTip")
            { 
                customer.PreAuthTip = true;
            }
            else if (customer is not null && customer.PreAuthOrOnDeviceTip == "OnDeviceTip")
            {
                customer.OnDeviceTip = true;
            }
            else if (customer is not null && customer.PreAuthOrOnDeviceTip == "PreAuthOnly")
            {
                customer.PreAuthOnly = true;
            }

            if (SafeFormElements.Contains("ShowCloudPosCancel"))
            {
                ShowPosCancel = true;    
            }

            if (SafeFormElements.Contains("ShowCreateToken"))
            {
                if (InstIdChecked)
                {
                    TokenTypes.Add("instrumentIdentifier");
                    // customer, paymentInstrument, customer, paymentInstrument, instrumentIdentifier, shippingAddress, shippingAddress
                }

                if (PayInstChecked)
                {
                    TokenTypes.Add("paymentInstrument");
                }

                if (ShippingInstChecked)
                {
                    TokenTypes.Add("shippingAddress");
                }

                if (CustInstChecked)
                {
                    TokenTypes.Add("customer");
                }

                if (customer is not null)
                {
                    customer.ActionTokenTypes = TokenTypes.ToArray();
                }

                if (customer is not null && IncludeAuth)
                {
                    Console.WriteLine($"IncludeAuth = {IncludeAuth}");
                    customer.PerformZeroAuth = true;
                }
            }
            if (customer is not null && SafeFormElements.Contains("ShowCloudPos") && ShowPosMoto)
            { 
                customer.CloudPaymentMode = "MOTO";
            }

            if (customer == null)
            {
                Console.WriteLine("customer is null");
            }
            else
            {
                FormCustomer = customer;
                if (SafeFormElements.Contains("ShowCart"))
                {
                    customer.Cart = cartService.cart;
                }
                Console.WriteLine($"Customer First Name = {customer.FirstName}");
                Console.WriteLine($"FormCustomer First Name = {FormCustomer.FirstName}");
                await ValidSubmit.InvokeAsync(FormCustomer);
            }
        }
        catch (Exception ex) 
        { 
            error = ex.Message; 
            error = "Error: " + ex.Message;
            SessionTransJson sessionResponse = new();
            sessionResponse!.error = error;
            sessionTransactions.AddTrans(sessionResponse);
            Navigation.NavigateTo("/errorhandler");

        }
    }

    private async Task PopulateForm()
    {

        cartService = new();
        customer = new();

        DateTime today = DateTime.Now;

        try 
        {

            if (SafeFormElements.Contains("ShowCreateToken"))
            {
                //IncludeAuth = false;
                InstIdChecked = true;
                ShippingInstChecked = true;
                PayInstChecked = true;
                CustInstChecked = true;
            }

            customer = await GeneralNetworkUtilities.PopulateBilling(_cardList);

            if (customer == null || customer.Error is not null || customer.AccountNumber is null)
            {
                if (customer is not null && customer.Error is not null)
                {
                    error = customer.Error;
                    error = customer.Error ?? "Failed to Complete Form Population - Likely PracticalApps server is not running";
                }
                else
                {
                    error = "Failed to Complete Form Population - Likely PracticalApps server is not running";
                }
                SessionTransJson sessionResponse = new();
                sessionResponse!.error = error;
                sessionTransactions.AddTrans(sessionResponse);
                Navigation.NavigateTo("/errorhandler");
            }
            else
            {
                customer.CardType = AddCardType.SetCardType(customer.AccountNumber);
                if (customer.CardType is null || customer.CardType.Contains("error"))
                {
                    throw new InvalidOperationException("Card Type Method Failed");                   
                }
            }

            if (customer is not null && CustInstChecked)
            {
                Guid guid = Guid.NewGuid();
                customer.MerchantCustomerID = guid.ToString();
            }

            try
            {
                await PopulateDefaultCart();

                if (cartService is not null && cartService is not null && cartService.TotalPrice >= 0M )
                {
                    Console.WriteLine($"Total Amount After Populate Cart: {cartService.TotalPrice}");
                    if (customer is not null)
                    {
                        customer.TotalAmount = cartService.TotalPrice;
                        Console.WriteLine($"customer Total Amount: {customer.TotalAmount}");
                    }
                }
                else
                {
                    Console.WriteLine($"Cart service failed to initialize.");
                    throw new InvalidOperationException("Cart Service Failed to Initialize");
                }
            } 
            catch (Exception ex) 
            { 
                error = $"Call for Sample Products Failed: {ex.Message}";
                SessionTransJson sessionResponse = new();
                sessionResponse!.error = error;
                sessionTransactions.AddTrans(sessionResponse);
                Navigation.NavigateTo("/errorhandler");
            }

            if (customer is not null && SafeFormElements.Contains("ShowInvoice"))
            {
                customer.InvoiceInformation = new();
                customer.AmountDetails = new();
                customer.Freight = new();
                customer.LineItem = new();

                localMinimumPartialAmount = cartService.TotalPrice;

                try 
                {

                    Random random = new Random();

                    int randomNumber = random.Next(0, 75);

                    sampleInvoiceDetailDtos = await GeneralNetworkUtilities.GetSampleInvoices();

                    if (cartService is not null && cartService.cart is not null)
                    {
                        DBProduct dBProduct = cartService.cart.FirstOrDefault()!;

                        if (sampleInvoiceDetailDtos is not null)
                        {
                            sampleInvoiceDetailDto = sampleInvoiceDetailDtos!.ElementAt(randomNumber)!;

                            customer.CompanyName = sampleInvoiceDetailDto.CustomerInformationCompanyName;
                            customer.InvoiceInformation!.InvoiceNumber = GeneralClientUtilities.GenerateRandom20DigitNumber();
                            customer.InvoiceInformation.Description = "Test Invoice";
                            customer.InvoiceInformation.DueDate = today.AddDays(30).ToShortDateString();
                            customer.InvoiceInformation.DeliveryMode = "Email";
                            customer.InvoiceInformation.AllowPartialPayments = "true";
                            customer.AmountDetails.DiscountPercent = (0.03m).ToString();
                            customer.AmountDetails!.DiscountAmount = (dBProduct.UnitPrice * Convert.ToDecimal(customer.AmountDetails.DiscountPercent)).ToString();
                            customer.AmountDetails.SubAmount = (0.00m).ToString();
                            customer.AmountDetails.MinimumPartialAmount = (localMinimumPartialAmount * .20m)?.ToString("0.##");
                            customer.LineItem!.ProductSku = dBProduct.ProductSku;
                            customer.LineItem!.UnitPrice = dBProduct.UnitPrice;
                            customer.LineItem!.Quantity = 1;
                            customer.LineItem!.TaxRate = 5.25m;
                            customer.LineItem!.TaxAmount = dBProduct.UnitPrice * .0525m;
                            customer.LineItem!.DiscountRate = 0.03m;
                            customer.LineItem!.DiscountAmount = dBProduct.UnitPrice * customer.LineItem!.DiscountRate;
                            customer.LineItem!.TotalAmount = dBProduct.UnitPrice - customer.LineItem!.DiscountAmount;
                            customer.TaxDetailsType = sampleInvoiceDetailDto.OrderInformationAmountDetailsTaxDetailsType;
                            customer.TaxDetailsRate = (0.03m).ToString();
                            customer.TaxDetailsAmount = (dBProduct.UnitPrice * Convert.ToDecimal(customer.TaxDetailsRate)).ToString();
                            customer.Freight!.Taxable = sampleInvoiceDetailDto.OrderInformationAmountDetailsFreightTaxable;
                            customer.Freight.TaxRate = (0.02m).ToString();
                        }
                        else if (sampleInvoiceDetailDtos is null)
                        {
                            Console.WriteLine($"Sample Invoice Failed to Initialize");
                            throw new InvalidOperationException("Sample Invoice Failed to Initialize");    
                        }
                    }
                    else if (cartService is null || cartService.cart is null)
                    {
                        Console.WriteLine($"Cart service failed to initialize.");
                        throw new InvalidOperationException("Cart Service Failed to Initialize");    
                    }
                }
                catch (Exception ex)
                {
                    error = $"Failed to Populate Invoice: {ex.Message}";
                    SessionTransJson sessionResponse = new();
                    sessionResponse!.error = error;
                    sessionTransactions.AddTrans(sessionResponse);
                    Navigation.NavigateTo("/errorhandler");
                }
            }



            StateHasChanged();

        }
        catch (Exception ex)
        {
            error = ex.Message;
            error = "Error: " + ex.Message;
            SessionTransJson sessionResponse = new();
            sessionResponse!.error = error;
            sessionTransactions.AddTrans(sessionResponse);
            Navigation.NavigateTo("/errorhandler");
        }
    }

    private async Task PopulateDefaultCart()
    {
        try
        {
            cartService = await GeneralNetworkUtilities.PopulateCart();
            if (cartService is not null && cartService?.TotalPrice is not null)
            {
                Console.WriteLine($"Cart total = {cartService.TotalPrice}");
                FormAmount = cartService.TotalPrice;
            }
            else if (cartService is null || cartService.TotalPrice is null)
            {
                Console.WriteLine($"Cart Service is NULL");
                error = "Cart Service is NULL";
                SessionTransJson sessionResponse = new();
                sessionResponse!.error = error;
                sessionTransactions.AddTrans(sessionResponse);
                Navigation.NavigateTo("/errorhandler");
            }

            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"No server connection {ex.Message}");    
            error = ex.Message;
            error = "Error: " + ex.Message;
            SessionTransJson sessionResponse = new();
            sessionResponse!.error = error;
            sessionTransactions.AddTrans(sessionResponse);
            Navigation.NavigateTo("/errorhandler");
        }
    }

    private void EnsureCustomerInitialized()
    {
        if (customer == null)
            customer = new B2cCustomer();
        if (customer.InvoiceInformation == null)
            customer.InvoiceInformation = new InvoiceInformation();
        if (customer.AmountDetails == null)
            customer.AmountDetails = new AmountDetails();
        if (customer.Freight == null)
            customer.Freight = new Freight();
        if (customer.LineItem == null)
            customer.LineItem = new LineItems();
    }
}
