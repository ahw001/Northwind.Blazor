@rendermode InteractiveServer
@page "/billing-test"

@inject ICardService cardService

<h3>PopulateBilling Test Runner</h3>

<button class="btn btn-primary me-2" @onclick="RunTests" disabled="@isRunning">
    Run PopulateBilling 100x
</button>


<hr class="my-4">


@if (isRunning)
{
    <p class="mt-3 text-warning">Running test... please wait</p>
}
else if (results.Count > 0)
{
    <ul class="list-group mt-3">
        @foreach (var result in results)
        {
            <li class="list-group-item">
                <pre>@result</pre>
            </li>
        }
    </ul>
}

@code {
    private bool isRunning = false;
    private List<string> results = new();

    private void ShowClicked()
    {
        Console.WriteLine("Button clicked!");
    }

    private async Task RunTests()
    {
        isRunning = true;
        results.Clear();
        StateHasChanged(); // show "Running..." message right away

        for (int i = 0; i < 1000; i++)
        {
            B2cCustomer result;

            try
            {
                result = await GeneralUtilities.PopulateBilling(cardService.Cards.ToList());
            }
            catch (Exception ex)
            {
                results.Add($"[Run {i + 1}] ❌ Exception: {ex.Message}");
                continue;
            }

            if (!string.IsNullOrEmpty(result.Error))
            {
                results.Add($"[Run {i + 1}] ❌ Error: {result.Error}");
            }
            else
            {
                string json = JsonSerializer.Serialize(result, new JsonSerializerOptions { WriteIndented = true });
                results.Add($"[Run {i + 1}] ✅ Customer:\n{json}");
            }

            StateHasChanged(); // refresh after each run
            await Task.Delay(75);
        }

        isRunning = false;
        StateHasChanged(); // refresh one last time to remove "Running..."
    }
}

